{"version":3,"file":"createFanGeometry.js","sources":["../../../Source/Core/FanGeometry.js","../../../Source/WorkersES6/createFanGeometry.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nlet scratchCartesian = new Cartesian3();\n\n/**\n * Describes a triangle fan around the origin.\n *\n * @alias FanGeometry\n * @ionsdk\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {Spherical[]} options.directions The directions, pointing outward from the origin, that defined the fan.\n * @param {Number} [options.radius] The radius at which to draw the fan.\n * @param {Boolean} [options.perDirectionRadius=false] When set to true, the magnitude of each direction is used in place of a constant radius.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @see FanGeometry#createGeometry\n */\nfunction FanGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.directions)) {\n    throw new DeveloperError(\"options.directions is required\");\n  }\n  if (!options.perDirectionRadius && !defined(options.radius)) {\n    throw new DeveloperError(\n      \"options.radius is required when options.perDirectionRadius is undefined or false.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._radius = options.radius;\n  this._directions = options.directions;\n  this._perDirectionRadius = options.perDirectionRadius;\n  this._vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  this._workerName = \"createFanGeometry\";\n}\n\n/**\n * Computes the geometric representation of a fan, including its vertices, indices, and a bounding sphere.\n *\n * @param {FanGeometry} fanGeometry A description of the fan.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nFanGeometry.createGeometry = function (fanGeometry) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(fanGeometry)) {\n    throw new DeveloperError(\"fanGeometry is required\");\n  }\n  //>>includeEnd('debug');\n\n  const vertexFormat = fanGeometry._vertexFormat;\n  const radius = fanGeometry._radius;\n  const perDirectionRadius =\n    defined(fanGeometry._perDirectionRadius) && fanGeometry._perDirectionRadius;\n  const sphericalDiretions = fanGeometry._directions;\n  if (sphericalDiretions[0].clock < sphericalDiretions[1].clock) {\n    sphericalDiretions.reverse();\n  }\n\n  let normals;\n  let bitangents;\n  let maxRadius = 0;\n\n  let i;\n  let x;\n  let s;\n  let direction;\n  let length;\n  const attributes = new GeometryAttributes();\n\n  //Convert all directions to Cartesian space and remove adjacent duplicates.\n  const directions = [];\n  const normalizedDirections = [];\n  let directionsLength = sphericalDiretions.length;\n  for (i = 0; i < directionsLength; i++) {\n    direction = Cartesian3.fromSpherical(sphericalDiretions[i]);\n    if (i === 0) {\n      directions.push(direction);\n      normalizedDirections.push(\n        Cartesian3.normalize(direction, new Cartesian3())\n      );\n    } else if (!Cartesian3.equals(directions[i - 1], direction)) {\n      if (i === directionsLength - 1) {\n        if (!Cartesian3.equals(directions[0], direction)) {\n          directions.push(direction);\n          normalizedDirections.push(\n            Cartesian3.normalize(direction, new Cartesian3())\n          );\n        }\n      } else {\n        directions.push(direction);\n        normalizedDirections.push(\n          Cartesian3.normalize(direction, new Cartesian3())\n        );\n      }\n    }\n  }\n  directionsLength = directions.length;\n\n  if (vertexFormat.position) {\n    length = (directionsLength + 1) * 2 * 3;\n    const positions = new Float64Array(length);\n\n    x = 0;\n    for (i = 0; i < directionsLength; i++) {\n      positions[x++] = 0;\n      positions[x++] = 0;\n      positions[x++] = 0;\n\n      direction = normalizedDirections[i];\n      const currentRadius = perDirectionRadius\n        ? Cartesian3.magnitude(directions[i])\n        : radius;\n      positions[x++] = direction.x * currentRadius;\n      positions[x++] = direction.y * currentRadius;\n      positions[x++] = direction.z * currentRadius;\n      maxRadius = Math.max(maxRadius, currentRadius);\n    }\n\n    positions[x++] = positions[0];\n    positions[x++] = positions[1];\n    positions[x++] = positions[2];\n    positions[x++] = positions[3];\n    positions[x++] = positions[4];\n    positions[x++] = positions[5];\n\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    length = (directionsLength + 1) * 2 * 3;\n    normals = new Float32Array(length);\n\n    let direction2;\n    x = 0;\n    for (i = 0; i < directionsLength; i++) {\n      direction = directions[i];\n      if (i + 1 === directionsLength) {\n        direction2 = directions[0];\n      } else {\n        direction2 = directions[i + 1];\n      }\n      scratchCartesian = Cartesian3.normalize(\n        Cartesian3.cross(direction, direction2, scratchCartesian),\n        scratchCartesian\n      );\n      normals[x++] = scratchCartesian.x;\n      normals[x++] = scratchCartesian.y;\n      normals[x++] = scratchCartesian.z;\n\n      normals[x++] = scratchCartesian.x;\n      normals[x++] = scratchCartesian.y;\n      normals[x++] = scratchCartesian.z;\n    }\n\n    normals[x++] = normals[0];\n    normals[x++] = normals[1];\n    normals[x++] = normals[2];\n    normals[x++] = normals[3];\n    normals[x++] = normals[4];\n    normals[x++] = normals[5];\n\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    length = (directionsLength + 1) * 2 * 3;\n    bitangents = new Float32Array(length);\n\n    x = 0;\n    for (i = 0; i < directionsLength; i++) {\n      direction = normalizedDirections[i];\n      bitangents[x++] = direction.x;\n      bitangents[x++] = direction.y;\n      bitangents[x++] = direction.z;\n\n      bitangents[x++] = direction.x;\n      bitangents[x++] = direction.y;\n      bitangents[x++] = direction.z;\n    }\n    bitangents[x++] = bitangents[0];\n    bitangents[x++] = bitangents[1];\n    bitangents[x++] = bitangents[2];\n    bitangents[x++] = bitangents[3];\n    bitangents[x++] = bitangents[4];\n    bitangents[x++] = bitangents[5];\n\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    length = (directionsLength + 1) * 2 * 3;\n    const tangents = new Float32Array(length);\n\n    x = 0;\n    for (i = 0; i < length; i += 6) {\n      const normal = Cartesian3.unpack(normals, i);\n      const bitangent = Cartesian3.unpack(bitangents, i);\n      const tangent = Cartesian3.normalize(\n        Cartesian3.cross(bitangent, normal, scratchCartesian),\n        scratchCartesian\n      );\n      tangents[x++] = tangent.x;\n      tangents[x++] = tangent.y;\n      tangents[x++] = tangent.z;\n\n      tangents[x++] = tangent.x;\n      tangents[x++] = tangent.y;\n      tangents[x++] = tangent.z;\n    }\n\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.st) {\n    length = (directionsLength + 1) * 2 * 2;\n    const textureCoordinates = new Float32Array(length);\n\n    x = 0;\n    for (i = 0; i < directionsLength; i++) {\n      s = 1.0 - i / (directionsLength + 1);\n      textureCoordinates[x++] = s;\n      textureCoordinates[x++] = 0.0;\n\n      textureCoordinates[x++] = s;\n      textureCoordinates[x++] = 1.0;\n    }\n\n    s = 1 - i / (directionsLength + 1);\n    textureCoordinates[x++] = s;\n    textureCoordinates[x++] = 0.0;\n\n    textureCoordinates[x++] = s;\n    textureCoordinates[x++] = 1.0;\n\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  x = 0;\n  i = 0;\n  length = (directionsLength + 1) * 2 * 3;\n  const indices = IndexDatatype.createTypedArray(length / 3, length);\n  while (x < length - 6) {\n    indices[x++] = i;\n    indices[x++] = i + 3;\n    indices[x++] = i + 1;\n\n    indices[x++] = i;\n    indices[x++] = i + 2;\n    indices[x++] = i + 3;\n\n    i += 2;\n  }\n\n  indices[x++] = i;\n  indices[x++] = 1;\n  indices[x++] = i + 1;\n\n  indices[x++] = i;\n  indices[x++] = 0;\n  indices[x++] = 1;\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, maxRadius),\n  });\n};\nexport default FanGeometry;\n","import FanGeometry from \"../Core/FanGeometry.js\";\nexport default FanGeometry.createGeometry;\n"],"names":["Cartesian3","defaultValue","defined","DeveloperError","VertexFormat","GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}